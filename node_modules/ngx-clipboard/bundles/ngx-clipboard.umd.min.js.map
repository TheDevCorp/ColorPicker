{"version":3,"sources":["ng://ngx-clipboard/lib/ngx-clipboard.service.ts","ng://ngx-clipboard/lib/ngx-clipboard.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard.module.ts"],"names":["ClipboardService","document","window","this","Object","defineProperty","prototype","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","selectTarget","re","copyText","clearSelection","isCopySuccessInIE11","error","clipboardData","getData","copyFromContent","content","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","removeChild","undefined","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","ta","isRTL","documentElement","getAttribute","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","Injectable","args","providedIn","Inject","DOCUMENT","WINDOW","ClipboardDirective","clipboardSrv","cbOnSuccess","EventEmitter","cbOnError","ngOnInit","ngOnDestroy","onClick","event","isSupported","handleResult","cbContent","succeeded","copiedContent","emit","isSuccess","Directive","selector","Input","Output","HostListener","ClipboardModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { WINDOW } from 'ngx-window-token';\r\n\r\n// The following code is heavily copy from https://github.com/zenorocha/clipboard.js\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    constructor(@Inject(DOCUMENT) public document: any, @Inject(WINDOW) private window: any) {}\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * copyFromInputElement\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(targetElm, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // this is for IE11 return true even if copy fail\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.window.document.body) {\r\n        // check if the temp textarea is still belong the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        return this.copyFromInputElement(this.tempTextArea);\r\n    }\r\n\r\n    // remove temporary textarea if any\r\n    public destroy(container: HTMLElement = this.window.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    // select the target html input element\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    // Moves focus away from `target` and back to the trigger, removes current selection.\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement, window: Window) {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n\r\n    // create a fake textarea for copy command\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    // tslint:disable-next-line:directive-selector\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement;\r\n    @Input()\r\n    public container: HTMLInputElement;\r\n\r\n    @Input()\r\n    public cbContent: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        if (succeeded) {\r\n            this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent, event: event });\r\n        } else {\r\n            this.cbOnError.emit({ isSuccess: false, event: event });\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ClipboardDirective } from './ngx-clipboard.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [ClipboardDirective],\n    exports: [ClipboardDirective]\n})\nexport class ClipboardModule {}\n"]}